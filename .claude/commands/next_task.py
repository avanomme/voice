#!/usr/bin/env python3
"""
Next Task Command - Voice Assistant Workflow
Implements the automated task workflow as specified in next_task.md
"""

import json
from pathlib import Path

def load_tasks():
    """Load tasks from docs/03-tasks.json"""
    tasks_file = Path(__file__).parent.parent.parent / "docs" / "03-tasks.json"

    if not tasks_file.exists():
        return []

    with open(tasks_file) as f:
        data = json.load(f)
        return data.get("tasks", [])

def get_next_todo_task():
    """Get the first task with status 'todo'"""
    tasks = load_tasks()

    for task in tasks:
        if task.get("status") == "todo":
            return task

    return None

def main():
    """Main execution following next_task.md workflow"""
    print("üéØ Voice Assistant - Next Task Workflow")
    print("=======================================")

    # Step 1: Find first task with status "todo"
    task = get_next_todo_task()

    if task is None:
        print("‚úÖ No tasks with status 'todo' found!")
        print("üéâ All current tasks are completed or in progress.")
        return

    print("üìã Next Task Found:")
    print(f"   ‚Ä¢ ID: {task['id']}")
    print(f"   ‚Ä¢ Title: {task['title']}")
    print(f"   ‚Ä¢ Description: {task['description']}")
    print(f"   ‚Ä¢ Priority: {task['priority']}")
    print(f"   ‚Ä¢ Category: {task['category']}")
    print(f"   ‚Ä¢ Estimated Hours: {task['estimated_hours']}")
    if task.get('dependencies'):
        print(f"   ‚Ä¢ Dependencies: {task['dependencies']}")
    print(f"   ‚Ä¢ Tags: {', '.join(task['tags'])}")
    print()

    print("üìö Required workflow steps:")
    print("1. Read CONTEXT.md, docs/01-scope.md, and docs/03-tasks.json")
    print("2. Implement the task (return unified PATCH DIFF only)")
    print("3. Mark task status as 'done' in docs/03-tasks.json")
    print("4. Append completion entry to docs/02-decisions.md")
    print("5. Regenerate CONTEXT.md (‚â§200 lines)")
    print("6. Run /check to inspect and fix any errors in .vscode/problems.json")
    print("7. Output JSON confirmation block")
    print("8. Create commit message and git push")
    print()

    print("üöÄ Implementation guidance:")
    category = task.get('category', '').lower()

    if 'web-ui' in category:
        print("   ‚Ä¢ Focus on web_voice_assistant.py and UI components")
        print("   ‚Ä¢ Test in browser: http://localhost:8765")
        print("   ‚Ä¢ Check browser console for errors")

    elif 'voice' in category or 'models' in category:
        print("   ‚Ä¢ Review voice_models.py and tts_engines.py")
        print("   ‚Ä¢ Test voice synthesis functionality")
        print("   ‚Ä¢ Verify model loading and availability")

    elif 'system-integration' in category:
        print("   ‚Ä¢ Implement secure permission framework")
        print("   ‚Ä¢ Create YAML configuration system")
        print("   ‚Ä¢ Add logging for all system access")

    elif 'ai-learning' in category:
        print("   ‚Ä¢ Design pluggable skills framework")
        print("   ‚Ä¢ Implement local memory persistence")
        print("   ‚Ä¢ Create developer documentation")

    elif 'testing' in category:
        print("   ‚Ä¢ Create comprehensive test suite")
        print("   ‚Ä¢ Verify all engines and voices work")
        print("   ‚Ä¢ Test error handling scenarios")

    else:
        print(f"   ‚Ä¢ Review category: {category}")
        print("   ‚Ä¢ Check existing codebase for patterns")
        print("   ‚Ä¢ Follow established conventions")

    print()
    print("‚ö†Ô∏è  Remember:")
    print("   ‚Ä¢ Return unified PATCH DIFF only for code changes")
    print("   ‚Ä¢ Limit patches to ‚â§3 files or ‚â§50 lines per change")
    print("   ‚Ä¢ Split large patches into smaller, focused changes")
    print("   ‚Ä¢ Follow existing code style and patterns")
    print("   ‚Ä¢ No comments in code unless explicitly requested")

if __name__ == "__main__":
    main()