#!/bin/bash
# Voice Assistant Installation Script
# Run this script to set up the complete voice assistant system

set -e  # Exit on any error

echo "ðŸŽ¤ Voice Assistant Installation Script"
echo "======================================"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running on Arch Linux
if ! command -v pacman &> /dev/null; then
    print_warning "This script is optimized for Arch Linux. You may need to adapt package names for other distributions."
fi

# Check Python version
python_version=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
if [[ $(echo "$python_version >= 3.9" | bc -l) == 0 ]] || [[ $(echo "$python_version < 3.12" | bc -l) == 0 ]]; then
    print_error "Python version $python_version detected. Coqui TTS requires Python >= 3.9 and < 3.12"
    exit 1
fi

print_status "Python $python_version detected - compatible"

# Install system dependencies
print_status "Installing system dependencies..."
if command -v pacman &> /dev/null; then
    sudo pacman -S --needed --noconfirm espeak-ng alsa-utils portaudio piper-tts
else
    print_warning "Not on Arch Linux - please install: espeak-ng, alsa-utils, portaudio, piper-tts manually"
fi

# Check if GPU is available
if command -v nvidia-smi &> /dev/null; then
    gpu_info=$(nvidia-smi --query-gpu=name --format=csv,noheader,nounits | head -1)
    print_status "GPU detected: $gpu_info"
    USE_CUDA=true
else
    print_warning "No NVIDIA GPU detected. Will use CPU for TTS (slower but still functional)"
    USE_CUDA=false
fi

# Create project directory
PROJECT_DIR="$HOME/voice-assistant"
print_status "Creating project directory: $PROJECT_DIR"
mkdir -p "$PROJECT_DIR"
cd "$PROJECT_DIR"

# Create virtual environment (optional but recommended)
read -p "Create Python virtual environment? (recommended) [y/N]: " create_venv
if [[ $create_venv =~ ^[Yy]$ ]]; then
    print_status "Creating virtual environment..."
    python3 -m venv venv
    source venv/bin/activate
    print_status "Virtual environment activated"
fi

# Install Python packages
print_status "Installing Python dependencies..."
pip install --upgrade pip

# Install core packages
pip install fastapi uvicorn python-multipart requests pathlib2

# Install PyTorch (with CUDA support if available)
if [[ $USE_CUDA == true ]]; then
    print_status "Installing PyTorch with CUDA support..."
    pip install torch torchaudio --index-url https://download.pytorch.org/whl/cu121
else
    print_status "Installing PyTorch (CPU version)..."
    pip install torch torchaudio --index-url https://download.pytorch.org/whl/cpu
fi

# Install Whisper
print_status "Installing OpenAI Whisper..."
pip install openai-whisper

# Install Coqui TTS
print_status "Installing Coqui TTS..."
pip install coqui-tts

# Install Bark TTS
print_status "Installing Bark TTS..."
pip install git+https://github.com/suno-ai/bark.git
pip install scipy

# Test installations
print_status "Testing installations..."

# Test PyTorch
python3 -c "import torch; print(f'PyTorch {torch.__version__} - CUDA available: {torch.cuda.is_available()}')" || {
    print_error "PyTorch installation failed"
    exit 1
}

# Test Whisper
python3 -c "import whisper; print('Whisper installed successfully')" || {
    print_error "Whisper installation failed"
    exit 1
}

# Test Coqui TTS
python3 -c "from TTS.api import TTS; print('Coqui TTS installed successfully')" || {
    print_warning "Coqui TTS test failed - may work after model download"
}

# Test Bark
python3 -c "import bark; print('Bark installed successfully')" || {
    print_warning "Bark test failed - may work after model download"
}

# Create model directories
print_status "Creating model directories..."
mkdir -p "$HOME/.local/share/voice_models/coqui"
mkdir -p "$HOME/.local/share/voice_models/bark"
mkdir -p "$HOME/.local/share/voice_models/piper"

# Set up audio permissions
print_status "Setting up audio permissions..."
sudo usermod -a -G audio $USER

# Create ALSA configuration to avoid conflicts
print_status "Creating ALSA configuration..."
cat > "$HOME/.asoundrc" << 'EOF'
pcm.!default {
    type pulse
}
ctl.!default {
    type pulse
}
EOF

# Test basic functionality
print_status "Testing basic TTS functionality..."
if [[ -f "tts_engines.py" ]]; then
    python3 -c "
try:
    from tts_engines import test_engines
    test_engines()
    print('âœ“ Basic TTS test completed')
except Exception as e:
    print(f'âš  TTS test failed: {e}')
    print('This is normal on first run - models will download when needed')
"
else
    print_warning "tts_engines.py not found - copy project files first"
fi

# Create startup script
print_status "Creating startup script..."
cat > "$PROJECT_DIR/start_assistant.sh" << 'EOF'
#!/bin/bash
cd "$(dirname "$0")"

# Activate virtual environment if it exists
if [[ -f "venv/bin/activate" ]]; then
    source venv/bin/activate
fi

# Start the voice assistant web interface
echo "Starting Voice Assistant Web Interface..."
echo "Access at: http://localhost:8765"
python3 web_voice_assistant.py
EOF

chmod +x "$PROJECT_DIR/start_assistant.sh"

# Print completion message
echo ""
echo "ðŸŽ‰ Installation Complete!"
echo "======================="
echo ""
print_status "Installation completed successfully!"
echo ""
echo "Next steps:"
echo "1. Copy the project files to: $PROJECT_DIR"
echo "2. Start the assistant: ./start_assistant.sh"
echo "3. Open browser to: http://localhost:8765"
echo ""
echo "Project structure:"
echo "  $PROJECT_DIR/"
echo "  â”œâ”€â”€ voice_models.py      # Voice configurations"
echo "  â”œâ”€â”€ tts_engines.py       # TTS engine implementations"
echo "  â”œâ”€â”€ assistant_logic.py   # Conversation processing"
echo "  â”œâ”€â”€ web_voice_assistant.py # Web interface"
echo "  â”œâ”€â”€ requirements.txt     # Python dependencies"
echo "  â”œâ”€â”€ install.sh          # This installation script"
echo "  â”œâ”€â”€ start_assistant.sh  # Startup script (created)"
echo "  â””â”€â”€ CLAUDE.md           # Project documentation"
echo ""

if [[ $create_venv =~ ^[Yy]$ ]]; then
    echo "Virtual environment created at: $PROJECT_DIR/venv"
    echo "To activate: source $PROJECT_DIR/venv/bin/activate"
    echo ""
fi

echo "ðŸ”§ Troubleshooting:"
echo "- If audio doesn't work, restart PulseAudio: pulseaudio --kill && pulseaudio --start"
echo "- First TTS generation will be slow due to model downloads"
echo "- Check GPU usage: nvidia-smi (if available)"
echo "- View logs in terminal while running the assistant"
echo ""
print_status "Happy voice synthesizing! ðŸŽ¤"
